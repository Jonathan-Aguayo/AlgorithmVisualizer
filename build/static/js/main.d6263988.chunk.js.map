{"version":3,"sources":["reportWebVitals.js","Components/Chart.jsx","Components/HelperFunctions.jsx","Components/Options.jsx","App.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Chart","props","xMax","width","yMax","height","randomArray","array","xScale","React","useMemo","scaleBand","range","domain","padding","yScale","scaleLinear","Math","max","legendScale","scaleOrdinal","Grid","container","direction","justify","alignItems","style","display","id","item","xs","preserveAspectRatio","viewBox","GradientPurpleOrange","x","y","fill","Group","map","d","index","barWidth","bandwidth","Bar","scale","labelFormat","label","labels","flexDirection","i","LegendItem","margin","value","LegendLabel","align","text","swap","indexA","indexB","temp","getQuickSortAnimations","animations","length","QuickSortHelper","low","high","p","pivot","j","push","swap1","swap2","partition","SwapGraphBars","arrayBars","BarI","BarJ","Promise","resolve","reject","tempheight","getAttribute","setAttribute","SwapGraphBarsHeight","tempy","barjHeight","Number","SwapGraphBarsY","ChangeBarColors","color","createRandomArray","arraySize","MaxNumber","minNumber","randomNumber","floor","random","includes","Options","useState","bars","setBars","algo","setAlgo","speed","setSpeed","marginTop","marginBottom","justifyContent","md","FormControl","fullWidth","InputLabel","Select","labelId","onChange","event","target","setArray","MenuItem","Slider","defaultValue","step","marks","min","valueLabelDisplay","Button","variant","onClick","document","getElementsByClassName","indexI","indexJ","setTimeout","QuickSort","console","log","alert","IconButton","RestartAlt","fontSize","App","parentDiv","useRef","setWidth","setHeight","useEffect","current","offsetWidth","ref","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d6263988.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './Chart.css'\nimport { Bar } from '@visx/shape';\nimport React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { Group } from '@visx/group';\nimport { scaleBand, scaleLinear, scaleOrdinal} from '@visx/scale';\nimport { GradientPurpleOrange,} from '@visx/gradient';\nimport {\n  LegendOrdinal,\n  LegendItem,\n  LegendLabel,\n} from '@visx/legend';\nimport ParentSize from '@visx/responsive/lib/components/ParentSize';\n\n\nexport default function Chart(props) {\n  const verticalMargin = 20;\n  const xMax = props.width;\n  const yMax = props.height;\n  const randomArray = props.array;\n\n  const xScale = React.useMemo(\n    () =>\n      scaleBand({\n        range: [10, xMax-10],\n        domain: randomArray,\n        padding: 0.15,\n      }),\n    [randomArray, xMax],\n  );\n\n  const yScale = React.useMemo(\n    () =>\n      scaleLinear({\n        range: [yMax, 0],\n        domain: [0, Math.max(...randomArray)],\n      }),\n    [randomArray, yMax],\n  );\n\n  const legendGlyphSize = 15;\n  const legendScale = scaleOrdinal(\n    {\n      domain: ['Compared', 'Pivot'],\n      range: ['green','red']\n    })\n\n  return (\n    <Grid container direction = 'column' justify='center' alignItems='center' style={{display: 'block'}} id='Graph'>\n      <Grid item xs = {12} style={{display: 'block'}} id='BarGraphDiv'>\n        <svg preserveAspectRatio viewBox = {`0 0 ${props.width} ${props.height} `}>\n          <GradientPurpleOrange id='teal'/>\n          <rect x='0' y='0' width={props.width} height={props.height}  fill='url(#teal)' />\n          <Group id='GraphBarGroup'>\n            {\n              randomArray.map( (d, index) => \n                {\n                  const barWidth = xScale.bandwidth();\n                  const height = yMax - (yScale(d)) - verticalMargin;\n                  const x = xScale(d)\n                  const y = yMax -height\n                  return(\n                      <Bar\n                      id = {`GraphBar-${index}`}\n                      key={`bar-${index}`}\n                      x={x}\n                      y={y}\n                      width={barWidth}\n                      height={height}\n                    >\n                    </Bar>\n                  )\n                })\n            } \n          </Group>\n        </svg>\n      </Grid>\n      <Grid item container xs={12} justify='center'>\n        <LegendOrdinal scale={legendScale} labelFormat = {label => `${label}`}>\n          {labels => (\n            <div style={{ display: 'flex', flexDirection: 'row' }} id = 'legend'>\n              {labels.map((label, i) => (\n                <LegendItem\n                  key={`legend-quantile-${i}`}\n                  margin=\"0 5px\"\n                >\n                  <svg width={legendGlyphSize} height={legendGlyphSize}>\n                    <rect fill={label.value} width={legendGlyphSize} height={legendGlyphSize} />\n                  </svg>\n                  <LegendLabel align=\"left\" margin=\"0 0 0 4px\">\n                    {label.text}\n                  </LegendLabel>\n                </LegendItem>\n              ))}\n            </div>\n          )}\n        </LegendOrdinal>\n      </Grid>\n    </Grid>\n\n  );\n\n\n\n\n\n}\n","//Function to swap array indexes\nexport function swap(array, indexA, indexB)\n{\n    let temp = array[indexA];\n    array[indexA] = array[indexB];\n    array[indexB] = temp;\n}\n\nexport function getQuickSortAnimations(array)\n{\n    const animations = [];\n    if(array.length <= 1)\n        return array;\n    QuickSortHelper(array, 0, array.length -1, animations);\n    return [animations, array];\n}\n\nexport function QuickSortHelper(array, low, high, animations)\n{\n    if(low < high)\n    {\n        let p = partition( array, low, high, animations);\n\n        QuickSortHelper(array, low, p - 1, animations);\n        QuickSortHelper(array, p + 1, high, animations);                             \n    }\n}\n\nexport function partition(array, low, high, animations)\n{\n    let pivot = array[high];\n    let i = (low - 1);\n    let j = low;\n    for (j; j < high; j++)\n    {\n\n        if(array[j] < pivot)\n        {                                                                          \n            i = i+1;\n            swap(array, i, j);\n            animations.push({swap1: i, swap2:j, pivot: high });\n            animations.push({swap1: i, swap2:j, pivot: high });\n        }\n    }\n    swap(array, i + 1, high)\n    animations.push({swap1: i + 1, swap2:high, pivot: high });\n    animations.push({swap1: i + 1, swap2:high, pivot: high });\n    return (i + 1);\n}\n\nexport function SwapGraphBarsHeight(arrayBars,BarI, BarJ)\n{\n    return new Promise( (resolve, reject) => \n    {\n        const tempheight = arrayBars[BarI].getAttribute('height');\n        arrayBars[BarI].setAttribute('height', arrayBars[BarJ].getAttribute('height'));\n        arrayBars[BarJ].setAttribute('height', tempheight);\n        resolve('done');\n    })\n}\n\nexport function SwapGraphBarsY(arrayBars,BarI, BarJ)\n{\n\n    const tempy = arrayBars[BarI].getAttribute('y');\n    const barjHeight = Number(arrayBars[BarJ].getAttribute('y'))\n    arrayBars[BarI].setAttribute('y',barjHeight);\n    arrayBars[BarJ].setAttribute('y', tempy);\n\n}\n\nexport function SwapGraphBarsX(arrayBars,BarI, BarJ)\n{\n\n    const tempy = arrayBars[BarI].getAttribute('x');\n    arrayBars[BarI].setAttribute('x', arrayBars[BarJ].getAttribute('x'));\n    arrayBars[BarJ].setAttribute('x', tempy);\n\n}\n\nexport const SwapGraphBars =  (arrayBars, i, j) =>\n{\n\n    SwapGraphBarsHeight(arrayBars,i,j).then( () => \n    {\n        SwapGraphBarsY(arrayBars,i,j);\n    })\n}\n\nexport const ChangeBarColors = (arrayBars, i, j, color) =>\n{\n    arrayBars[i].style.fill = color;\n    arrayBars[j].style.fill = color;\n}\n\nexport function createRandomArray(arraySize, MaxNumber, minNumber)\n{\n    let randomArray = [];\n    while (randomArray.length < arraySize)\n    {\n        let randomNumber = Math.floor(Math.random() * MaxNumber) + minNumber;\n        if(!randomArray.includes(randomNumber))\n        {\n            randomArray.push(randomNumber);\n        }\n    }\n    return randomArray;\n}\n\n\n","import React from \"react\";\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport Button from '@mui/material/Button';\nimport Slider from '@mui/material/Slider';\nimport Grid from '@mui/material/Grid'\nimport IconButton from '@mui/material/IconButton';\nimport {RestartAlt} from '@mui/icons-material'\nimport {ChangeBarColors, createRandomArray, getQuickSortAnimations, SwapGraphBars} from './HelperFunctions.jsx'\n\nexport default function Options(props)\n{\n    const [bars, setBars] = React.useState(10);\n    const [algo, setAlgo] = React.useState('Quick-Sort')\n    const [speed, setSpeed] = React.useState(1000)\n\n    const handleBarChange = (event) =>\n    {\n        setBars(event.target.value);\n        props.setArray(createRandomArray(event.target.value,1000,100));\n    }\n\n    const handleBarReset = (event) =>\n    {\n        props.setArray(createRandomArray(bars,1000,100));\n    }\n\n    const handleAlgoChange = (event) =>\n    {\n        setAlgo(event.target.value);\n    }\n\n    const handleSpeedChange = (event) =>\n    {\n        setSpeed(event.target.value);\n    }\n\n    function QuickSort(array)\n    {\n        const [animations,] = getQuickSortAnimations(array)\n        let arrayBars = document.getElementsByClassName('visx-bar')\n        for(let i = 0; i < animations.length; i++)\n        {   \n            let indexI = animations[i].swap1;\n            let indexJ = animations[i].swap2;\n            let pivot = animations[i].pivot;\n            //Want to swap at odd numbered indexes like 1, 3, etc\n            let swap = (i % 2 === 1);\n            if(swap)\n            {\n                setTimeout(() => \n                {\n                    SwapGraphBars(arrayBars,indexI,indexJ);\n                    ChangeBarColors(arrayBars,indexI,indexJ,'white')\n                    ChangeBarColors(arrayBars,pivot,pivot,'white')\n                },i*speed)\n            }\n            else\n            {\n                setTimeout(() => \n                {\n                    ChangeBarColors(arrayBars,indexI,indexJ,'green')    \n                    ChangeBarColors(arrayBars,pivot,pivot,'red')   \n                },i*speed)\n            }\n        }\n    }\n\n    function SortArray()\n    {\n        switch (algo)\n        {\n            case 'Quick-Sort' :\n                QuickSort(props.array);\n                break;\n            case 'Merge-Sort':\n                console.log('merge-sort');\n                break;\n            case 'Insertion-Sort':\n                console.log('merge-sort');\n                break;\n            default:\n                alert('Sorry that is not an algorithm');\n        }\n    }\n\n    return(\n        <Grid container style={{marginTop:'10px', marginBottom:'10px',padding: '5px'}} justifyContent='space-evenly' alignItems='center'>\n            <Grid item xs={4} md={2}>\n                <FormControl fullWidth>\n                    <InputLabel id=\"Bar-Number-select\">Number of bars</InputLabel>\n                    <Select\n                    labelId=\"Bar-Number-select-label\"\n                    id=\"demo-simple-select\"\n                    value={bars}\n                    label=\"Number of bars\"\n                    onChange={handleBarChange}\n                    >\n                    <MenuItem value={10}>10</MenuItem>\n                    <MenuItem value={20}>20</MenuItem>\n                    <MenuItem value={50}>50</MenuItem>\n                    <MenuItem value={100}>100</MenuItem>\n                    <MenuItem value={500}>500</MenuItem>\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs={4} md={2}>\n                <FormControl fullWidth>\n                    <InputLabel id=\"Algo-select\">Sorting Algorithm</InputLabel>\n                    <Select\n                    labelId=\"Algo-Select-label\"\n                    id=\"Algo-Select\"\n                    label=\"Sorting Algorithm\"\n                    value={algo}\n                    onChange = {handleAlgoChange}\n                    >\n                    <MenuItem value={'Merge-Sort'}>Merge Sort</MenuItem>\n                    <MenuItem value={'Insertion-Sort'}>Insertion Sort</MenuItem>\n                    <MenuItem value={'Quick-Sort'}>Quick Sort</MenuItem>\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs={5} md={2}>\n                <p>Time between steps (ms)</p>\n                <Slider\n                    defaultValue={speed}\n                    step={100}\n                    marks\n                    min={10}\n                    max={1000}\n                    onChange = {handleSpeedChange}\n                    valueLabelDisplay=\"auto\"\n                />               \n            </Grid>\n            <Grid item container xs={2} md={1} justifyContent='flex-end'>\n                <Button variant='outlined' onClick = {SortArray}> Go</Button>\n            </Grid>\n            <Grid item container xs={2} md={1} justifyContent='flex-end'>\n                <IconButton onClick={handleBarReset}>\n                    <RestartAlt fontSize='large'/>\n                </IconButton>\n            </Grid>\n        </Grid>\n    );\n\n\n}\n\n\n\n\n\n\n","import React, {useRef, useEffect, useState} from 'react';\nimport Chart from './Components/Chart.jsx'\nimport { createRandomArray } from './Components/HelperFunctions.jsx';\nimport Options from './Components/Options.jsx'\n\nexport default function App(props)\n{\n    const parentDiv = useRef(null);\n    const [width, setWidth] = useState(null);\n    const [height, setHeight] = useState(null);\n    const [array, setArray] = useState(createRandomArray(10,1000,100));\n\n    useEffect( () => \n    {\n        if(parentDiv.current)\n        {\n            setWidth(parentDiv.current.offsetWidth);\n            setHeight(parentDiv.current.offsetWidth * 0.3);\n        }\n    },[array])\n    return(\n            <div id='ParentDiv' ref={parentDiv} >\n                <Options array = {array} setArray = {setArray}/>\n                { \n                    width ?\n                    <Chart width = {width} height={height} array = {array}/>\n                    :\n                    <p>Hello</p>\n                }\n            </div>\n    )\n\n\n}\n","import React, {useRef, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App.jsx'\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n\n    <App/>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}